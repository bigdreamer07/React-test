[{"F:\\test\\kappa-london\\src\\index.js":"1","F:\\test\\kappa-london\\src\\reportWebVitals.js":"2","F:\\test\\kappa-london\\src\\app\\App.js":"3","F:\\test\\kappa-london\\src\\app\\api\\Api.js":"4","F:\\test\\kappa-london\\src\\app\\components\\Block.js":"5"},{"size":500,"mtime":1611194268739,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609327834758,"results":"8","hashOfConfig":"7"},{"size":1202,"mtime":1611320084089,"results":"9","hashOfConfig":"7"},{"size":354,"mtime":1611277010141,"results":"10","hashOfConfig":"7"},{"size":3869,"mtime":1611321137933,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17b1i8p",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"F:\\test\\kappa-london\\src\\index.js",[],"F:\\test\\kappa-london\\src\\reportWebVitals.js",[],"F:\\test\\kappa-london\\src\\app\\App.js",[],"F:\\test\\kappa-london\\src\\app\\api\\Api.js",["23"],"F:\\test\\kappa-london\\src\\app\\components\\Block.js",["24","25"],"import React, { useState, useEffect, memo, useCallback } from 'react';\r\nimport Line from './Line';\r\nimport Text from './Text';\r\nimport Api from '../api/Api';\r\nimport { useGlobalState } from '../store/Store';\r\nimport '../assets/css/App.css';\r\n\r\nconst Block = memo(({data, onActiveChange, locations}) => {\r\n  const [structure] = useGlobalState('structure');\r\n  const [actives, setActives] = useState(calcInitialActives());\r\n  const [texts, setTexts] = useState(calcInitialActives());\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const folders = data.data.map(line => structure.find(x => x.type === 'line' && x.id === line))\r\n                           .map(line => structure.find(x => x.type === 'folder' && x.id === line.data[0]))\r\n                           .filter(folder => folder);\r\n\r\n  function calcInitialActives() {\r\n    return data.data.map(line => structure.find(x => x.type === 'line' && x.id === line))\r\n                    .map(line => structure.find(x => x.type === 'text' && x.id === line.data[0]))\r\n                    .filter(line => line)\r\n                    .map(text => text.original)\r\n  }\r\n\r\n  const getSuggestions = () => {\r\n    let payload = {\r\n      \"want\": data.original.want,\r\n      \"active\": actives.map(active => active.id)\r\n    }\r\n\r\n    Api.getSuggestions(payload).then(res => {\r\n      setOptions(res.data.data.response)\r\n    }).catch(err => {\r\n      setOptions([])\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSuggestions();\r\n  }, [data, actives, locations]);\r\n\r\n  useEffect(() => {\r\n    if(data.type === 'folder') {\r\n      data.properties.locations.forEach(element => {\r\n        let existLoc = locations.find((x) => x.name === element.name);\r\n        if(existLoc) {\r\n          getSuggestions();\r\n        }\r\n      });\r\n    }\r\n  }, [locations]);\r\n\r\n  const onOptionClick = useCallback((option) => {\r\n    let existText = texts.find((x) => x.id === option.id);\r\n    if(!existText) {\r\n      setActives([...actives, option]);\r\n      setTexts([...texts, option]);\r\n      \r\n      if(onActiveChange) {\r\n        onActiveChange(option, data.type === 'folder' ? data.properties.locations : []);\r\n      }\r\n    }\r\n  }, [data, actives, texts, onActiveChange]);\r\n\r\n  const onChildActiveChange = useCallback((option, locations) => {\r\n    if(option) setActives([...actives, option]);\r\n    if(onActiveChange) onActiveChange(option, locations);\r\n  }, [actives, onActiveChange]);\r\n\r\n  return (\r\n    <div className={\"container Block \" + (data.type === \"folder\" ? \"Folder-block\" : \"Section-block\")}>\r\n      <h5 className=\"Block-title\">{data.properties.name}</h5>\r\n\r\n      { options.map((option, i) => {\r\n        return (\r\n          <span key={\"option-key-\" + i} onClick={() => onOptionClick(option)} className=\"Option-title\">{option.name}</span>\r\n        )\r\n      }) }\r\n      \r\n      { texts.map((text, i) => {\r\n        return (\r\n          <Line key={\"text-key-\" + i}>\r\n            <Text title={text.name} />\r\n          </Line>\r\n        )\r\n      }) }\r\n      \r\n      { folders.map((folder, i) => {\r\n        return (\r\n          <Line key={\"folder-key-\" + i}>\r\n            <Block data={folder} actives={actives} onActiveChange={onChildActiveChange} locations={locations} />\r\n          </Line>\r\n        )\r\n      }) }\r\n    </div>\r\n  )\r\n}, (prevProps, nextProps) => {\r\n  if(prevProps.data !== nextProps.data || prevProps.onActiveChange !== nextProps.onActiveChange) return false;\r\n  if(!equalsIgnoreOrder(prevProps.locations, nextProps.locations)) {\r\n    \r\n    return false;\r\n  }\r\n  return true;\r\n});\r\n\r\nconst equalsIgnoreOrder = (a, b) => {\r\n  if (a.length !== b.length) return false;\r\n  const uniqueValues = new Set([...a, ...b]);\r\n  for (const v of uniqueValues) {\r\n    const aCount = a.filter(e => e === v).length;\r\n    const bCount = b.filter(e => e === v).length;\r\n    if (aCount !== bCount) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default Block;",{"ruleId":"26","severity":1,"message":"27","line":14,"column":1,"nodeType":"28","endLine":17,"endColumn":2},{"ruleId":"29","severity":1,"message":"30","line":40,"column":6,"nodeType":"31","endLine":40,"endColumn":32,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"33","line":51,"column":6,"nodeType":"31","endLine":51,"endColumn":17,"suggestions":"34"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSuggestions'. Either include it or remove the dependency array.","ArrayExpression",["35"],"React Hook useEffect has missing dependencies: 'data.properties.locations', 'data.type', and 'getSuggestions'. Either include them or remove the dependency array.",["36"],{"desc":"37","fix":"38"},{"desc":"39","fix":"40"},"Update the dependencies array to be: [data, actives, locations, getSuggestions]",{"range":"41","text":"42"},"Update the dependencies array to be: [data.properties.locations, data.type, getSuggestions, locations]",{"range":"43","text":"44"},[1468,1494],"[data, actives, locations, getSuggestions]",[1768,1779],"[data.properties.locations, data.type, getSuggestions, locations]"]